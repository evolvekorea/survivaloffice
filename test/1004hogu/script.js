document.addEventListener("DOMContentLoaded", () => {
  console.log("‚úÖ DOM fully loaded");

  const startScreen   = document.getElementById("start-screen");
  const quizScreen    = document.getElementById("quiz-screen");
  const resultScreen  = document.getElementById("result-screen");

  const startBtn      = document.getElementById("start-btn");
  const questionText  = document.getElementById("question-text");
  const choiceA       = document.getElementById("choice-a");
  const choiceB       = document.getElementById("choice-b");
  const choiceButtons = [choiceA, choiceB];

  const resultImage   = document.getElementById("result-image");

  // ÏßÑÌñâÎ∞î
  const progressFill  = document.getElementById("progress-fill");
  const progressTrack = document.getElementById("progress-track");
  const progressCount = document.getElementById("progress-count");

  let currentIndex = 0;
  let angelScore   = 0; // Ï≤úÏÇ¨ Ï†êÏàò
  let hoguScore    = 0; // Ìò∏Íµ¨ Ï†êÏàò

  function shuffle(arr){
    const a = arr.slice();
    for(let i=a.length-1;i>0;i--){
      const j = Math.floor(Math.random()*(i+1));
      [a[i],a[j]] = [a[j],a[i]];
    }
    return a;
  }

  // =========================
  // ‚úÖ ÌÖåÏä§Ìä∏ Î¨∏Ìï≠ (10Î¨∏Ìï≠)
  //    - Í∞Å ÏÑ†ÌÉùÏùÄ { text, type, weight }
  //    - type: 'angel' | 'hogu'
  //    - weight: Í∏∞Î≥∏ 1, Îã® ÌïòÎÇòÏùò Î¨∏Ìï≠Îßå 2Î°ú ÏÑ§Ï†ïÌïòÏó¨ Î≥ÄÎ≥ÑÎ†• Î∂ÄÏó¨
  //      (ÏïÑÎûòÏóêÏÑúÎäî 6Î≤à Î¨∏Ìï≠ÏùÑ +2Î°ú ÏßÄÏ†ï. ÏõêÌïòÎäî Î¨∏Ìï≠ÏúºÎ°ú Î∞îÍøîÎèÑ Îê®)
  // =========================
  const questions = [
    {
      question: "ÏπúÍµ¨Í∞Ä Îòê ÎèàÏù¥ ÏóÜÎã§Í≥† Î∞•ÏùÑ ÏÇ¨Îã¨Îùº ÌïúÎã§.",
      options: [
        { text: "Ïò§ÎäòÎßå ÌûòÎì§Îã§ÎãàÍπå ÎÇ¥Í∞Ä ÏÇ¨Ï§ÑÍ≤å.", type: "angel", weight: 1 },
        { text: "Ìï≠ÏÉÅ ÎÇ¥Í∞Ä ÏÇ¨ÏôîÏúºÎãà Í∑∏ÎÉ• Îòê ÏÇ¨Ï§ÄÎã§.", type: "hogu",  weight: 1 }
      ]
    },
    {
      question: "ÎèôÎ£åÍ∞Ä ÎÇ¥ ÏóÖÎ¨¥ÍπåÏßÄ Î∂ÄÌÉÅÌïúÎã§.",
      options: [
        { text: "Í∏âÌïú ÏÉÅÌô©Ïù¥ÎùºÎ©¥ ÎÇ¥Í∞Ä ÎèÑÏôÄÏ§Ñ Ïàò ÏûàÏßÄ.", type: "angel", weight: 1 },
        { text: "Îäò ÌïòÎçò Í±∞ÎãàÍπå Í∑∏ÎÉ• Ìï¥Ï§ÄÎã§.",         type: "hogu",  weight: 1 }
      ]
    },
    {
      question: "Ïï†Ïù∏Ïù¥ Îä¶Í≤å Ïó∞ÎùΩÌïúÎã§.",
      options: [
        { text: "Î∞îÎπ¥Í≤†ÏßÄ ÌïòÍ≥† Ïù¥Ìï¥ÌïúÎã§.",           type: "angel", weight: 1 },
        { text: "ÏõêÎûò Í∑∏Îü¨ÎãàÍπå Îòê Ï∞∏ÎäîÎã§.",           type: "hogu",  weight: 1 }
      ]
    },
    {
      question: "Î™®Î•¥Îäî ÏÇ¨ÎûåÏù¥ Í∏∏ÏùÑ Î¨ºÏñ¥Î≥∏Îã§.",
      options: [
        { text: "ÏπúÏ†àÌûà ÏÑ§Î™ÖÌï¥Ï£ºÍ≥† Ïûò Í∞ÄÎùºÍ≥† ÌïúÎã§.",   type: "angel", weight: 1 },
        { text: "ÏùµÏàôÌïòÎãà Îòê Î©ÄÎ¶¨ÍπåÏßÄ Îç∞Î†§Îã§ Ï§ÄÎã§.",   type: "hogu",  weight: 1 }
      ]
    },
    {
      question: "ÏπúÍµ¨Í∞Ä Ï§ëÏöîÌïú ÎÇ† ÏïΩÏÜçÏùÑ Ïñ¥Í≤ºÎã§.",
      options: [
        { text: "ÏÇ¨Ï†ï ÏûàÏóàÍ≤†ÏßÄ ÌïòÍ≥† ÎÑòÏñ¥Í∞ÑÎã§.",       type: "angel", weight: 1 },
        { text: "Îäò Ïù¥Îü∞ ÏãùÏù¥Îùº Í∑∏ÎÉ• Îòê ÎÑòÏñ¥Í∞ÑÎã§.",   type: "hogu",  weight: 1 }
      ]
    },
    {
      // üî• Î≥ÄÎ≥ÑÎ†• Î¨∏Ìï≠: weight 2
      question: "ÌöåÏãù ÏûêÎ¶¨ÏóêÏÑú Î™®Îëê Í≥ÑÏÇ∞ÏùÑ ÎØ∏Î£¨Îã§.",
      options: [
        { text: "Î∂ÑÏúÑÍ∏∞ Ïñ¥ÏÉâÌïòÎãà Ïù¥Î≤àÏóî ÎÇ¥Í∞Ä ÎÇ∏Îã§.",   type: "angel", weight: 2 }, // +2
        { text: "Ïñ¥Ï∞®Ìîº Ìï≠ÏÉÅ ÎÇ¥Í∞Ä ÎÇ¥Îãà Í∑∏ÎÉ• Îòê ÎÇ∏Îã§.", type: "hogu",  weight: 2 }  // +2
      ]
    },
    {
      question: "ÏßÄÏù∏Ïù¥ Ïù¥ÏÇ¨ ÎèÑÏôÄÎã¨Îùº ÌïúÎã§.",
      options: [
        { text: "ÌûòÎì† ÎÇ†Ïù¥Îãà Í∏∞Í∫ºÏù¥ ÎèÑÏôÄÏ§ÄÎã§.",       type: "angel", weight: 1 },
        { text: "Îäò Î∂àÎ†§ Îã§ÎÖÄÏÑú ÏùµÏàôÌïòÍ≤å Îòê ÎèÑÏôÄÏ§ÄÎã§.", type: "hogu",  weight: 1 }
      ]
    },
    {
      question: "Î∂ÄÌÉÅÏùÑ Í±∞Ï†àÌïòÍ∏∞ Ïï†Îß§Ìïú ÏÉÅÌô©Ïù¥Îã§.",
      options: [
        { text: "Í∞ÄÎä•Ìïú ÎßåÌÅºÎßå Îì§Ïñ¥Ï§ÄÎã§.",            type: "angel", weight: 1 },
        { text: "Îß§Î≤à Í∑∏ÎûòÏôîÏúºÎãà Í∑∏ÎÉ• Îã§ Ìï¥Ï§ÄÎã§.",     type: "hogu",  weight: 1 }
      ]
    },
    {
      question: "ÏÉàÎ≤ΩÏóê ÏπúÍµ¨Í∞Ä Í≥†ÎØº ÏÉÅÎã¥ÏùÑ ÌïúÎã§.",
      options: [
        { text: "Ïû†ÏùÄ Î∂ÄÏ°±Ìï¥ÎèÑ ÌûòÎì§Îã§Îãà Îì§Ïñ¥Ï§ÄÎã§.",     type: "angel", weight: 1 },
        { text: "Ìï≠ÏÉÅ Ïù¥Îü∞ Ï†ÑÌôîÎ•º Î∞õÏúºÎãà Îòê Îì§Ïñ¥Ï§ÄÎã§.", type: "hogu",  weight: 1 }
      ]
    },
    {
      question: "Îã®Ï≤¥ÏóêÏÑú Ïû°ÏùºÏùÑ Îß°Í∏∏ ÏÇ¨ÎûåÏù¥ ÏóÜÎã§.",
      options: [
        { text: "ÎàÑÍµ∞Í∞ÄÎäî Ìï¥Ïïº ÌïòÎãà ÎÇ¥Í∞Ä Îß°ÎäîÎã§.",     type: "angel", weight: 1 },
        { text: "Îäò ÎÇòÎßå ÌïòÎçò Í±∞Îùº Í∑∏ÎÉ• Îòê Îß°ÎäîÎã§.",   type: "hogu",  weight: 1 }
      ]
    }
  ];

  const totalQuestions = questions.length;

  function updateProgress() {
    const current = Math.min(currentIndex + 1, totalQuestions);
    const percent = (current / totalQuestions) * 100;

    if (progressFill)  progressFill.style.width = percent + "%";
    if (progressTrack) progressTrack.setAttribute("aria-valuenow", String(current));
    if (progressCount) progressCount.textContent = `${current} / ${totalQuestions}`;
  }

  startBtn.addEventListener("click", () => {
    startScreen.classList.remove("active");
    quizScreen.classList.add("active");
    showQuestion();
  });

  function showQuestion() {
    const q = questions[currentIndex];
    if (!q) return;

    updateProgress();
    questionText.textContent = q.question;

    const opts = shuffle(q.options); // 2Í∞ú ÏÑûÍ∏∞
    opts.forEach((opt, idx) => {
      const btn = choiceButtons[idx];
      btn.textContent   = opt.text;
      btn.dataset.type  = opt.type;     // 'angel' | 'hogu'
      btn.dataset.weight= String(opt.weight ?? 1); // Í∏∞Î≥∏ 1
    });
  }

  choiceButtons.forEach(btn => {
    btn.addEventListener("click", () => {
      const type   = btn.dataset.type || "angel";
      const weight = parseInt(btn.dataset.weight || "1", 10);

      if (type === "angel") angelScore += weight;
      else                  hoguScore  += weight;

      currentIndex++;
      if (currentIndex < totalQuestions) {
        showQuestion();
      } else {
        showResult();
      }
    });
  });

  function showResult() {
    console.log("üèÅ Ï¢ÖÎ£å - Ï≤úÏÇ¨:", angelScore, "/ Ìò∏Íµ¨:", hoguScore);

    quizScreen.classList.remove("active");
    resultScreen.classList.add("active");

    // Í≤∞Í≥º 2Ï¢ÖÎßå ÏÇ¨Ïö© (Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÎäî ÌïÑÏöîÏóê ÎßûÍ≤å ÍµêÏ≤¥)
    const resultImages = {
      angel: "https://www.survivaloffice.com/images/1004hogu3.png",
      hogu:  "https://www.survivaloffice.com/images/1004hogu2.png"
    };

    const isAngel = angelScore >= hoguScore; // ÎèôÏ†êÏùÄ Ï≤úÏÇ¨ Ïö∞ÏÑ†
    const bucket  = isAngel ? "angel" : "hogu";

    resultImage.src = resultImages[bucket];
    resultImage.alt = isAngel ? "Ï≤úÏÇ¨ Í≤∞Í≥º" : "Ìò∏Íµ¨ Í≤∞Í≥º";

    bottomActions.style.display = 'flex';
    console.log(`üñº Í≤∞Í≥º: ${bucket}, Ïù¥ÎØ∏ÏßÄ: ${resultImages[bucket]}`);
  }

  // ---------- ÌïòÎã® Î≤ÑÌäº Ï∞∏Ï°∞ ----------
  const shareBtn      = document.getElementById("share-kakao");
  const restartBtn    = document.getElementById("restart-btn");
  const bottomActions = document.getElementById("bottom-actions");

  // ---------- Ïπ¥Ïπ¥Ïò§ SDK Î°úÎìú ----------
  async function loadKakaoSDK() {
    return new Promise((resolve, reject) => {
      if (window.Kakao && Kakao.isInitialized()) {
        console.log("‚úÖ Ïπ¥Ïπ¥Ïò§ SDK Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎê®");
        resolve();
        return;
      }
      const script = document.createElement("script");
      script.src = "https://developers.kakao.com/sdk/js/kakao.min.js";
      script.onload = () => {
        if (!window.Kakao) {
          reject("‚ùå Kakao Í∞ùÏ≤¥Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏùå");
          return;
        }
        Kakao.init("eee6c2e01641161de9f217ba99c6a0da");
        console.log("‚úÖ Ïπ¥Ïπ¥Ïò§ SDK Î°úÎìú Î∞è Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");
        resolve();
      };
      script.onerror = () => reject("‚ùå Kakao SDK Î°úÎìú Ïã§Ìå®");
      document.head.appendChild(script);
    });
  }
  loadKakaoSDK().then(() => {
    console.log("‚úÖ Ïπ¥Ïπ¥Ïò§ SDK ÏÇ¨Ïö© Ï§ÄÎπÑ ÏôÑÎ£å!");
  }).catch(err => console.error(err));

  // ---------- Ïπ¥Ïπ¥Ïò§ Í≥µÏú† ----------
  function shareKakao(imageUrl) {
    if (!window.Kakao || !Kakao.isInitialized()) {
      alert("‚ö†Ô∏è Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.");
      return;
    }

    const finalImage = imageUrl && imageUrl.length > 0
      ? imageUrl
      : "https://www.survivaloffice.com/images/1004hogu.png";

    Kakao.Link.sendDefault({
      objectType: "feed",
      content: {
        title: "Ï≤úÏÇ¨ vs Ìò∏Íµ¨ ÌÖåÏä§Ìä∏",
        description: "ÎÇòÎäî Ï≤úÏÇ¨ÏùºÍπå, Ìò∏Íµ¨ÏùºÍπå? 10Î¨∏Ìï≠ÏúºÎ°ú Í∞ÑÎã® Ï≤¥ÌÅ¨!",
        imageUrl: finalImage,
        link: {
          mobileWebUrl: "https://www.survivaloffice.com/test/1004hogu",
          webUrl:       "https://www.survivaloffice.com/test/1004hogu"
        }
      },
      buttons: [
        {
          title: "ÌÖåÏä§Ìä∏ ÌïòÎü¨ Í∞ÄÍ∏∞",
          link: {
            mobileWebUrl: "https://www.survivaloffice.com/test/1004hogu",
            webUrl:       "https://www.survivaloffice.com/test/1004hogu"
          }
        }
      ]
    });
  }

  // ---------- Îã§ÏãúÌïòÍ∏∞ ----------
  function resetTest() {
    currentIndex = 0;
    angelScore   = 0;
    hoguScore    = 0;

    resultImage.src = "";
    resultScreen.classList.remove("active");
    quizScreen.classList.remove("active");
    startScreen.classList.add("active");

    bottomActions.style.display = 'none';

    if (progressFill)  progressFill.style.width = "0%";
    if (progressTrack) progressTrack.setAttribute("aria-valuenow", "0");
    if (progressCount) progressCount.textContent = `0 / ${totalQuestions}`;

    console.log("üîÑ ÌÖåÏä§Ìä∏ Î¶¨ÏÖã ÏôÑÎ£å");
  }

  // ---------- Î≤ÑÌäº Ïù¥Î≤§Ìä∏ ----------
  shareBtn.addEventListener("click", () => {
    shareKakao(resultImage?.src || "");
  });
  restartBtn.addEventListener("click", resetTest);

  // =========================
  // Ï∞∏Ïó¨Ïûê Ïπ¥Ïö¥ÌÑ∞ (CountAPI)
  // =========================
  const COUNTER_BASE = 'https://api.counterapi.dev/v1';
  const ONLY_ONCE_PER_SESSION = false; // Í∞ôÏùÄ ÌÉ≠ ÏÑ∏ÏÖòÏóêÏÑú 1ÌöåÎßå ÏßëÍ≥ÑÌïòÎ†§Î©¥ true

  function counterPath(ns, key) {
    return `${COUNTER_BASE}/${encodeURIComponent(ns)}/${encodeURIComponent(key)}/`;
  }

  function getCounterConfig() {
    const el = document.getElementById("test-counter");
    return {
      el,
      ns: el?.dataset.counterNamespace || "survivaloffice",
      key: el?.dataset.counterKey       || "1004hogu",
    };
  }

  function cacheKey(ns, key){ return `counter_${ns}_${key}`; }
  function getCachedCount(ns, key, maxAgeMs = 10 * 60 * 1000){
    try{
      const raw = localStorage.getItem(cacheKey(ns,key));
      if(!raw) return null;
      const obj = JSON.parse(raw);
      if(Date.now() - obj.t > maxAgeMs) return null;
      return typeof obj.v === 'number' ? obj.v : null;
    }catch{ return null; }
  }
  function setCachedCount(ns, key, val){
    try{ localStorage.setItem(cacheKey(ns,key), JSON.stringify({ v: Number(val)||0, t: Date.now() })); }catch{}
  }

  async function fetchCount(ns, key) {
    const url = counterPath(ns, key);
    try {
      const r = await fetch(url, { cache: 'no-store', headers: { 'accept': 'application/json' } });
      if (!r.ok) return 0;
      const data = await r.json();
      return (typeof data.count === 'number') ? data.count :
             (typeof data.value === 'number') ? data.value : 0;
    } catch (e) {
      console.warn('[counter] fetch failed:', e);
      return 0;
    }
  }

  async function hitCount(ns, key) {
    const url = `${counterPath(ns, key)}up`;
    try {
      const r = await fetch(url, { cache: 'no-store', headers: { 'accept': 'application/json' } });
      if (!r.ok) return null;
      const data = await r.json();
      return (typeof data.count === 'number') ? data.count :
             (typeof data.value === 'number') ? data.value : null;
    } catch (e) {
      console.warn('[counter] hit failed:', e);
      return null;
    }
  }

  function shouldIncreaseThisSession(ns, key) {
    if (!ONLY_ONCE_PER_SESSION) return true;
    const flag = `counted_${ns}_${key}`;
    if (sessionStorage.getItem(flag) === "1") return false;
    sessionStorage.setItem(flag, "1");
    return true;
  }

  function renderCount(el, n) {
    if (!el) return;
    el.textContent = `Ï¥ù ${Number(n).toLocaleString()}Î™Ö Ï∞∏Ïó¨`;
    el.setAttribute("data-count", String(n));
    const { ns, key } = getCounterConfig();
    if (ns && key && typeof n === 'number') setCachedCount(ns, key, n);
  }

  (async function initCounter() {
    const { el, ns, key } = getCounterConfig();
    if (!el) return;

    const cached = getCachedCount(ns, key);
    if (cached !== null) renderCount(el, cached);

    const fresh = await fetchCount(ns, key);
    renderCount(el, fresh);

    const startBtnEl = document.getElementById("start-btn");
    if (startBtnEl) {
      startBtnEl.addEventListener("click", async () => {
        try {
          if (shouldIncreaseThisSession(ns, key)) {
            const after = await hitCount(ns, key);
            if (after !== null) renderCount(el, after);
          }
        } catch (e) {
          console.warn("[counter] increase on click failed:", e);
        }
      });
    }
  })();

});
