// script.js
document.addEventListener("DOMContentLoaded", () => {
  console.log("‚úÖ DOM fully loaded");

  const startScreen   = document.getElementById("start-screen");
  const quizScreen    = document.getElementById("quiz-screen");
  const resultScreen  = document.getElementById("result-screen");
  const tbModal       = document.getElementById("tiebreaker-modal");
  const tbChoices     = document.getElementById("tb-choices");

  const startBtn      = document.getElementById("start-btn");
  const questionText  = document.getElementById("question-text");
  const choiceA       = document.getElementById("choice-a");
  const choiceB       = document.getElementById("choice-b");
  const choiceC       = document.getElementById("choice-c");
  const choiceD       = document.getElementById("choice-d");
  const choiceButtons = [choiceA, choiceB, choiceC, choiceD];

  const resultImage   = document.getElementById("result-image");
  if (resultImage) {
    resultImage.loading = "eager";
    resultImage.decoding = "async";
  }

  // ÏßÑÌñâÎ∞î
  const progressFill  = document.getElementById("progress-fill");
  const progressTrack = document.getElementById("progress-track");
  const progressCount = document.getElementById("progress-count");

  // Ï†êÏàò/ÏÉÅÌÉú
  let scores = { ENTJ:0, ESTJ:0, INFP:0, ISFP:0 };
  let currentIndex = 0;

  // ‚úÖ Ï∂îÏ†ÅÏö©
  const selections = [];                     // [{q:1..10|'TB', type:'ENTJ'.., weight:1}]
  let tiebreakUsed = false;
  let tiebreakCandidates = [];

  // Í≤∞Í≥º Ïù¥ÎØ∏ÏßÄ Îß§Ìïë
  const RESULT_IMAGES = {
    ENTJ: "https://www.survivaloffice.com/images/poorrich4.png",
    ESTJ: "https://www.survivaloffice.com/images/poorrich3.png",
    INFP: "https://www.survivaloffice.com/images/poorrich2.png",
    ISFP: "https://www.survivaloffice.com/images/poorrich1.png"
  };

  // ÏßàÎ¨∏ Îç∞Ïù¥ÌÑ∞ (10Î¨∏Ìï≠, 4ÏßÄÏÑ†Îã§)
  const questions = [
    {
      question: "ÏõîÍ∏âÎÇ†Ïù¥ ÎêòÎ©¥ ÎÇòÎäî?",
      options: [
        { text:"ÏÉàÎ°úÏö¥ Ìà¨ÏûêÏ≤òÎ•º Ï∞æÎäîÎã§", type:"ENTJ" },
        { text:"Ïòà¬∑Ï†ÅÍ∏àÏóê Íº¨Î∞ïÍº¨Î∞ï ÎÑ£ÎäîÎã§", type:"ESTJ" },
        { text:"Ï±ÖÏù¥ÎÇò Ï∞ΩÏûë ÎèÑÍµ¨Î•º ÏÇ∞Îã§", type:"INFP" },
        { text:"ÎßõÏûàÎäî Í±∞ Î®πÍ≥† ÌîåÎ†âÏä§ÌïúÎã§", type:"ISFP" }
      ]
    },
    {
      question: "Î≥¥ÎÑàÏä§Î•º Î∞õÏïòÎã§!",
      options: [
        { text:"Ï£ºÏãù/Î∂ÄÎèôÏÇ∞ Ìà¨ÏûêÏóê ÎÑ£ÎäîÎã§", type:"ENTJ" },
        { text:"ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏ∂ï¬∑Î≥¥Ìóò", type:"ESTJ" },
        { text:"Ïó¨Ìñâ¬∑Ï∑®ÎØ∏Ïóê Ïì¥Îã§", type:"INFP" },
        { text:"ÏπúÍµ¨Îì§Ïù¥Îûë ÌååÌã∞ÌïúÎã§", type:"ISFP" }
      ]
    },
    {
      question: "ÏπúÍµ¨Í∞Ä 'Îèà Î≤ÑÎäî Î≤ï ÏïåÎ†§Ï§ò'ÎùºÍ≥† Ìï† Îïå?",
      options: [
        { text:"Ï†ÑÎûµ ÏÑ∏Ïö∞Îäî Î≤ïÏùÑ ÏïåÎ†§Ï§ÄÎã§", type:"ENTJ" },
        { text:"Í∏àÏúµÏÉÅÌíàÏùÑ Ï∂îÏ≤úÌïúÎã§", type:"ESTJ" },
        { text:"ÎèàÎ≥¥Îã§ ÌñâÎ≥µÏù¥ Ï§ëÏöîÌïòÎã§ ÎßêÌïúÎã§", type:"INFP" },
        { text:"Í∞ÅÏûê ÌïòÍ≥† Ïã∂ÏùÄ Í±∏ ÌïòÎùºÍ≥† ÎßêÌïúÎã§", type:"ISFP" }
      ]
    },
    {
      question: "ÏáºÌïëÌï† Îïå ÎÇòÎäî?",
      options: [
        { text:"ÌïÑÏöîÌïú Í≤ÉÎßå Í≥®ÎùºÏÑú ÏÇ∞Îã§", type:"ENTJ" },
        { text:"ÏÑ∏Ïùº ÏãúÍ∏∞Ïóê ÎßûÏ∂∞ ÏÇ∞Îã§", type:"ESTJ" },
        { text:"Í∞êÏÑ±Ïóê ÎÅåÎ¶¨Î©¥ Î∞îÎ°ú ÏÇ∞Îã§", type:"INFP" },
        { text:"Ï¶âÌù•Ï†ÅÏúºÎ°ú ÎßàÏùå Í∞ÄÎäî ÎåÄÎ°ú ÏÇ∞Îã§", type:"ISFP" }
      ]
    },
    {
      question: "Ï§ëÏöî ÌîÑÎ°úÏ†ùÌä∏Î•º Îß°Í≤å ÎêòÎ©¥?",
      options: [
        { text:"Î¶¨ÎçîÏã≠ÏùÑ Î∞úÌúòÌï¥ ÏÑ±Í≥ºÎÇ∏Îã§", type:"ENTJ" },
        { text:"Îß§Îâ¥ÏñºÎåÄÎ°ú Ï∞©Ïã§Ìûà ÏßÑÌñâ", type:"ESTJ" },
        { text:"ÏùòÎØ∏ ÏûàÎäî Í∞ÄÏπòÎ•º Í≥†ÎØºÌïúÎã§", type:"INFP" },
        { text:"Ï∞ΩÏùòÏ†ÅÏúºÎ°ú Ïû¨ÎØ∏ÏûàÍ≤å Ï†ëÍ∑ºÌïúÎã§", type:"ISFP" }
      ]
    },
    {
      question: "ÏùÄÌá¥ ÌõÑ ÎÇòÎäî?",
      options: [
        { text:"Ìà¨Ïûê ÏàòÏùµÏúºÎ°ú Ïó¨Ïú†Î°≠Í≤å", type:"ENTJ" },
        { text:"Ïó∞Í∏à¬∑Ï†ÄÏ∂ïÏúºÎ°ú ÏïàÏ†ïÏ†ÅÏúºÎ°ú", type:"ESTJ" },
        { text:"Ï°∞Ïö©Ìûà Ï±Ö¬∑ÏòàÏà†ÌïòÎ©∞ ÏÇ∞Îã§", type:"INFP" },
        { text:"Ïó¨ÌñâÌïòÎ©∞ ÏûêÏú†Î°≠Í≤å ÏÇ∞Îã§", type:"ISFP" }
      ]
    },
    {
      question: "Îèà ÎïåÎ¨∏Ïóê Ïä§Ìä∏Î†àÏä§ Î∞õÏùÑ Îïå?",
      options: [
        { text:"Îçî Î≤å Î∞©Î≤ïÏùÑ Ï∞æÎäîÎã§", type:"ENTJ" },
        { text:"Í∞ÄÍ≥ÑÎ∂ÄÎ°ú ÏßÄÏ∂ú Ï†êÍ≤Ä", type:"ESTJ" },
        { text:"ÎßàÏùåÏùÑ Îã¨ÎûòÎ©∞ ÏúÑÎ°úÎ∞õÍ≥† Ïã∂Îã§", type:"INFP" },
        { text:"ÎßõÏûàÎäî Í±∞ Î®πÍ≥† ÏûäÎäîÎã§", type:"ISFP" }
      ]
    },
    {
      question: "Î°úÎòêÏóê ÎãπÏ≤®ÎêúÎã§Î©¥?",
      options: [
        { text:"ÏÇ¨ÏóÖ ÌôïÏû•¬∑Ìà¨Ïûê", type:"ENTJ" },
        { text:"Î∂ÑÏÇ∞ Ìà¨Ïûê¬∑Ï†ÄÏ∂ï", type:"ESTJ" },
        { text:"ÍøàÍæ∏Îçò Ïßë¬∑Î¨∏ÌôîÏÉùÌôú", type:"INFP" },
        { text:"ÏáºÌïë¬∑ÎÜÄÎü¨Îã§ÎãåÎã§", type:"ISFP" }
      ]
    },
    {
      question: "ÎèàÏùÄ ÎÇòÏóêÍ≤å?",
      options: [
        { text:"ÏûêÏú†ÏôÄ Í∏∞Ìöå", type:"ENTJ" },
        { text:"ÏïàÏ†ïÍ≥º ÏïàÏ†Ñ", type:"ESTJ" },
        { text:"ÎÇ¥ ÍøàÏùÑ ÏßÄÏºúÏ£ºÎäî Ìûò", type:"INFP" },
        { text:"Ïò§ÎäòÏùÑ Ï¶êÍ∏∞Îäî ÏàòÎã®", type:"ISFP" }
      ]
    },
    {
      question: "Í∞ëÏûêÍ∏∞ ÏßÅÏû•ÏùÑ ÏûÉÎäîÎã§Î©¥?",
      options: [
        { text:"ÎÑ§Ìä∏ÏõåÌÇπÏúºÎ°ú ÏÉà Í∏∞Ìöå Ï∞æÍ∏∞", type:"ENTJ" },
        { text:"ÏûêÍ≤©Ï¶ù Ï§ÄÎπÑ¬∑Í≥ÑÌöç ÏÑ∏ÏõÄ", type:"ESTJ" },
        { text:"ÎßàÏùå ÌöåÎ≥µÌï† ÏãúÍ∞Ñ Í∞ñÍ∏∞", type:"INFP" },
        { text:"ÌïòÍ≥† Ïã∂ÏùÄ Í±∞ Î®ºÏ†Ä Ìï¥Î≥¥Í∏∞", type:"ISFP" }
      ]
    }
  ];

  const totalQuestions = questions.length;

  // ÌÉÄÏù¥Î∏åÎ†àÏù¥Ïª§ Î¨∏Ìï≠
  const tieBreaker = {
    question: "ÏßÄÍ∏à ÎãπÏû• ÌÅ∞ ÏßÄÏ∂ú Ïú†ÌòπÏù¥ ÏôîÎã§. ÎãπÏã†Ïùò ÏÑ†ÌÉùÏùÄ?",
    options: {
      ENTJ: "Í∏∞ÌöåÎùº ÏÉùÍ∞ÅÌïòÍ≥† Ìà¨ÏûêÌïúÎã§",
      ESTJ: "ÏòàÏÇ∞ Í∑úÏπô ÌôïÏù∏ ÌõÑ Í≤∞Ï†ïÌïúÎã§",
      INFP: "ÏùòÎØ∏ ÏûàÎäî Îç∞ Ïì¥Îã§",
      ISFP: "Ï¶âÌù•Ï†ÅÏúºÎ°ú ÏßàÎü¨Î≤ÑÎ¶∞Îã§"
    }
  };

  function shuffle(arr){
    const a = arr.slice();
    for(let i=a.length-1;i>0;i--){
      const j = Math.floor(Math.random()*(i+1));
      [a[i],a[j]] = [a[j],a[i]];
    }
    return a;
  }

  function updateProgress() {
    const current = Math.min(currentIndex + 1, totalQuestions);
    const percent = (current / totalQuestions) * 100;

    if (progressFill)  progressFill.style.width = percent + "%";
    if (progressTrack) progressTrack.setAttribute("aria-valuenow", String(current));
    if (progressCount) progressCount.textContent = `${current} / ${totalQuestions}`;
  }

  startBtn.addEventListener("click", () => {
    startScreen.classList.remove("active");
    quizScreen.classList.add("active");
    showQuestion();
  });

  function showQuestion() {
    const q = questions[currentIndex];
    if (!q) return;

    updateProgress();
    questionText.textContent = q.question;

    const opts = shuffle(q.options);
    choiceButtons.forEach((btn, idx) => {
      const opt = opts[idx];
      btn.textContent    = opt.text;
      btn.dataset.type   = opt.type;
      btn.dataset.weight = "1";           // ‚úÖ Î¨∏Ï†úÎ≥Ñ Í∞ÄÏ§ëÏπò Ï†úÍ±∞ ‚Üí Ìï≠ÏÉÅ 1Ï†ê
      btn.style.display  = "block";
    });
  }

  choiceButtons.forEach(btn => {
    btn.addEventListener("click", () => {
      const type   = btn.dataset.type;
      const weight = parseFloat(btn.dataset.weight || "1"); // Ìï≠ÏÉÅ 1
      if (type) {
        scores[type] += weight;
        selections.push({ q: currentIndex + 1, type, weight });
      }

      currentIndex++;
      if (currentIndex < totalQuestions) {
        showQuestion();
      } else {
        decideResult();
      }
    });
  });

  function decideResult() {
    const maxScore = Math.max(...Object.values(scores));
    const leaders = Object.keys(scores).filter(t => scores[t] === maxScore);

    if (leaders.length === 1) {
      showResult(leaders[0]);
    } else {
      openTiebreaker(leaders).then(finalType => {
        scores[finalType] += 1; // ‚úÖ ÌÉÄÏù¥Î∏åÎ†àÏù¥Ïª§ÎèÑ +1
        tiebreakUsed = true;
        selections.push({ q: 'TB', type: finalType, weight: 1 });
        showResult(finalType);
      });
    }
  }

  function showResult(finalType) {
    trackResult(finalType);

    quizScreen.classList.remove("active");
    resultScreen.classList.add("active");
    bottomActions.style.display = "flex";

    const url = RESULT_IMAGES[finalType];
    resultImage.src = url;
    resultImage.alt = finalType + " Í≤∞Í≥º";
  }

  // ---------- ÌÉÄÏù¥Î∏åÎ†àÏù¥Ïª§ Î™®Îã¨ ----------
  function openTiebreaker(ties) {
    return new Promise(resolve => {
      tbChoices.innerHTML = "";
      tbModal.removeAttribute("hidden");

      tiebreakCandidates = ties.slice();

      ties.forEach(type => {
        const btn = document.createElement("button");
        btn.className = "choice-btn";
        btn.textContent = tieBreaker.options[type];
        btn.onclick = () => {
          tbModal.setAttribute("hidden", "");
          resolve(type);
        };
        tbChoices.appendChild(btn);
      });

      // Î∞îÍπ• ÏòÅÏó≠ ÌÅ¥Î¶≠ ÎßâÍ∏∞
      tbModal.querySelector(".modal__backdrop").onclick = e => {
        e.stopPropagation();
      };
    });
  }

  // ---------- Í≤∞Í≥º Ï∂îÏ†Å ----------
  function trackResult(finalType) {
    try {
      const payload = {
        test: "poorrich",
        result: finalType,
        scores: { ...scores },
        selections,
        tiebreak: {
          used: tiebreakUsed,
          candidates: tiebreakCandidates
        },
        ts: new Date().toISOString(),
        ua: navigator.userAgent
      };

      console.log("üìä RESULT_EVENT", payload);

      if (typeof gtag === "function") {
        gtag('event', 'poorrich_result', {
          result: finalType,
          used_tiebreak: tiebreakUsed ? 'yes' : 'no',
          value: Math.max(...Object.values(scores)) || 0
        });
      }

      const url = "https://www.survivaloffice.com/api/poorrich/result";
      const body = JSON.stringify(payload);
      if (navigator.sendBeacon) {
        const blob = new Blob([body], { type: "application/json" });
        navigator.sendBeacon(url, blob);
      } else {
        fetch(url, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body,
          keepalive: true
        }).catch(() => {});
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è trackResult failed:", e);
    }
  }

  // ---------- Ï∞∏Ïó¨Ïûê Ïπ¥Ïö¥ÌÑ∞ ----------
  const COUNTER_BASE = 'https://api.counterapi.dev/v1';
  const COUNTER_CFG = { ns:"survivaloffice", key:"poorrich" };
  const counterEl = document.getElementById("test-counter");

  function renderCount(el, n) {
    if (!el) return;
    el.textContent = `Ï¥ù ${Number(n).toLocaleString()}Î™Ö Ï∞∏Ïó¨`;
  }

  async function fetchCount(ns, key) {
    const url = `${COUNTER_BASE}/${encodeURIComponent(ns)}/${encodeURIComponent(key)}/`;
    try {
      const r = await fetch(url, { cache: 'no-store', headers:{'accept':'application/json'} });
      if (!r.ok) return 0;
      const d = await r.json();
      return d.count || d.value || 0;
    } catch { return 0; }
  }

  async function hitCount(ns, key) {
    const url = `${COUNTER_BASE}/${encodeURIComponent(ns)}/${encodeURIComponent(key)}/up`;
    try {
      const r = await fetch(url, { cache:'no-store', headers:{'accept':'application/json'} });
      if (!r.ok) return null;
      const d = await r.json();
      return d.count || d.value || null;
    } catch { return null; }
  }

  (async function initCounter(){
    if(!counterEl) return;
    const n = await fetchCount(COUNTER_CFG.ns, COUNTER_CFG.key);
    renderCount(counterEl, n);
    startBtn.addEventListener("click", async ()=>{
      const after = await hitCount(COUNTER_CFG.ns, COUNTER_CFG.key);
      if(after!==null) renderCount(counterEl, after);
    });
  })();

  // ---------- Í≥µÏú† & Îã§ÏãúÌïòÍ∏∞ ----------
  const shareBtnEl   = document.getElementById("share-kakao");
  const restartBtnEl = document.getElementById("restart-btn");
  const bottomActions = document.getElementById("bottom-actions");

  async function loadKakaoSDK() {
    return new Promise((resolve, reject) => {
      if (window.Kakao && window.Kakao.isInitialized()) { resolve(); return; }
      const script = document.createElement("script");
      script.src = "https://developers.kakao.com/sdk/js/kakao.min.js";
      script.onload = () => {
        if (window.Kakao && !window.Kakao.isInitialized()) {
          window.Kakao.init("eee6c2e01641161de9f217ba99c6a0da");
        }
        resolve();
      };
      script.onerror = () => reject("Kakao SDK Î°úÎìú Ïã§Ìå®");
      document.head.appendChild(script);
    });
  }
  loadKakaoSDK().catch(console.error);

  function shareKakao(imageUrl) {
    if (!window.Kakao || !Kakao.isInitialized()) {
      alert("‚ö†Ô∏è Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.");
      return;
    }
    const finalImage = imageUrl || "https://www.survivaloffice.com/images/poorrich.png";
    Kakao.Link.sendDefault({
      objectType: "feed",
      content: {
        title: "Î∂ÄÏûê vs Í±∞ÏßÄ ÌÖåÏä§Ìä∏",
        description: "ÏÑ±Í≤©ÏúºÎ°ú ÏïåÏïÑÎ≥¥Îäî Î∂ÄÏûê vs Í±∞ÏßÄ ÌÖåÏä§Ìä∏",
        imageUrl: finalImage,
        link: {
          mobileWebUrl: "https://www.survivaloffice.com/test/poorrich",
          webUrl: "https://www.survivaloffice.com/test/poorrich"
        }
      },
      buttons: [
        {
          title: "ÌÖåÏä§Ìä∏ ÌïòÎü¨ Í∞ÄÍ∏∞",
          link: {
            mobileWebUrl: "https://www.survivaloffice.com/test/poorrich",
            webUrl: "https://www.survivaloffice.com/test/poorrich"
          }
        }
      ]
    });
  }

  if (shareBtnEl) shareBtnEl.addEventListener("click", () => shareKakao(resultImage?.src || ""));
  if (restartBtnEl) restartBtnEl.addEventListener("click", () => {
    scores = { ENTJ:0, ESTJ:0, INFP:0, ISFP:0 };
    currentIndex = 0;

    selections.length = 0;
    tiebreakUsed = false;
    tiebreakCandidates = [];

    resultImage.src = "";
    resultScreen.classList.remove("active");
    quizScreen.classList.remove("active");
    startScreen.classList.add("active");
    bottomActions.style.display = "none";
    if (progressFill) progressFill.style.width = "0%";
    if (progressTrack) progressTrack.setAttribute("aria-valuenow","0");
    if (progressCount) progressCount.textContent = `0 / ${totalQuestions}`;
    console.log("üîÑ ÌÖåÏä§Ìä∏ Î¶¨ÏÖã ÏôÑÎ£å");
  });

});
